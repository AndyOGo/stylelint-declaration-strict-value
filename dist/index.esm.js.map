{"version":3,"file":"index.esm.js","sources":["../src/defaults.js","../src/lib/validation.js","../src/index.js"],"sourcesContent":["/**\n * Plugin secondary options.\n *\n * @typedef {object} SecondaryOptions\n * @property {boolean} [ignoreVariables=true] - Wheter or not to ignore variables.\n * @property {boolean} [ignoreFunctions=true] - Wheter or not to ignore function.\n * @property {null|number|string|Array|object} [ignoreKeywords=null] - **DEPRECATED:** An ignored keywords config.\n * @property {number|string|RegExp|Array|object} [ignoreValues=null] - An ignored values config.\n * @property {boolean} [expandShorthand=false] - Wheter or not to expand shorthand CSS properties.\n * @property {boolean} [recurseLonghand=false] - Wheter or not to expand longhand CSS properties recursivly - this is only useful for the border property.\n * @property {string} [severity='error'] - Adjust severity of the rule, `'warning'` or `'error'` (default).\n * @property {null|string} [message=null] - A custom message when a rule is violated, interpolated with `${types}`, `${value}` and `${property}`.\n * @property {boolean} [disableFix=false] - Don't auto-fix if `--fix` option is applied.\n * @property {null|Function} [autoFixFunc=null] - By default no auto-fix feature.\n */\n\n/**\n * Default options.\n *\n * @constant {SecondaryOptions}\n * @property {boolean} [ignoreVariables=true] - Ignore variables by default.\n * @property {boolean} [ignoreFunctions=true] - Ignore function by default.\n * @property {null} [ignoreKeywords=null] - **DEPRECATED:** Forbid keywords by default.\n * @property {null} [ignoreValues=null] - Forbid values by default.\n * @property {boolean} [expandShorthand=false] - Expand shorthand CSS properties.\n * @property {boolean} [recurseLonghand=false] - Do not expand longhand properties recursivly - only useful for `border`.\n * @property {string} [severity='error'] - This rule's default severity is `'error'`.\n * @property {null} [message=null] - Use default message.\n * @property {null} [disableFix=false] - Don't auto-fix if `--fix` option is applied.\n * @property {null} [autoFixFunc=null] - By default no auto-fix feature.\n * @default\n */\nconst defaults = {\n  ignoreVariables: true,\n  ignoreFunctions: true,\n  ignoreKeywords: null,\n  ignoreValues: null,\n  expandShorthand: false,\n  recurseLonghand: false,\n  severity: 'error',\n  message: null,\n  disableFix: false,\n  autoFixFunc: null,\n}\n\nexport default defaults\n","import path from 'path'\n\nimport defaults from '../defaults'\n\n/**\n * Check if type is either `number` or `string`.\n *\n * @param {*} value - Any value.\n *\n * @returns {boolean} - Returns `true` if `value`'s type is either `number` or `string`, else `false`.\n */\nfunction isNumberOrString(value) {\n  const type = typeof value\n\n  return type === 'string' || type === 'number'\n}\n\n/**\n * Validate primary options of stylelint plugin config.\n *\n * @param {string|string[]} actual - The actual config to validate.\n *\n * @returns {boolean} - Returns `true` if primary options are valied, else `false`.\n */\nfunction validProperties(actual) {\n  return isNumberOrString(actual)\n    || (Array.isArray(actual) && actual.every((item) => isNumberOrString(item)))\n}\n\n/**\n * Validate optional secondary options of stylelint plugin config.\n *\n * @param {SecondaryOptions} actual - The actual config to validate.\n *\n * @returns {boolean} - Returns `true` if secondary options are valied, else `false`.\n */\nfunction validOptions(actual) {\n  if (typeof actual !== 'object') return false\n\n  const allowedKeys = Object.keys(defaults)\n  if (!Object.keys(actual).every((key) => allowedKeys.indexOf(key) > -1)) return false\n\n  if ('ignoreVariables' in actual\n    && typeof actual.ignoreVariables !== 'boolean'\n    && actual.ignoreVariables !== null) return false\n\n  if ('ignoreFunctions' in actual\n    && typeof actual.ignoreFunctions !== 'boolean'\n    && actual.ignoreFunctions !== null) return false\n\n  if ('severity' in actual\n    && typeof actual.severity !== 'string'\n    && actual.severity !== null) return false\n\n  if ('ignoreKeywords' in actual\n    && !validProperties(actual.ignoreKeywords)\n    && !validHash(actual.ignoreKeywords)) return false\n\n  if ('ignoreValues' in actual\n    && !validProperties(actual.ignoreValues)\n    && !validHash(actual.ignoreValues)) return false\n\n  if ('expandShorthand' in actual\n    && typeof actual.expandShorthand !== 'boolean'\n    && actual.expandShorthand !== null) return false\n\n  if ('recurseLonghand' in actual\n    && typeof actual.recurseLonghand !== 'boolean'\n    && actual.recurseLonghand !== null) return false\n\n  if ('message' in actual\n    && typeof actual.message !== 'string'\n    && actual.message !== null) return false\n\n  if ('disableFix' in actual\n    && typeof actual.disableFix !== 'boolean'\n    && actual.disableFix !== null) return false\n\n  if ('autoFixFunc' in actual\n    && typeof actual.autoFixFunc !== 'function'\n    && typeof actual.autoFixFunc !== 'string'\n    && actual.autoFixFunc !== null) return false\n\n  return true\n}\n\n/**\n * Validate optional hash keyword config.\n *\n * @param {object} actual - A keyword config.\n *\n * @returns {boolean} - Returns `true` if hash keyword config is valid, else `false`.\n */\nfunction validHash(actual) {\n  if (typeof actual !== 'object') return false\n\n  return Object.keys(actual).every((key) => validProperties(actual[key]))\n}\n\n/**\n * Build expected message for stylelint report.\n *\n * @param {Array} types - Either `variable`, `function` and/or `keyword`.\n * @param {string} value - The CSS declaration's value.\n * @param {string} property - The CSS declaration's property.\n * @param {string} [customMessage] - A custom message to be delivered upon error interpolated with `${types}`, `${value}` and `${property}`.\n *\n * @returns {string} - Returns an expected message for stylelint report.\n */\nfunction expected(types, value, property, customMessage) {\n  if (Array.isArray(types)) {\n    const typesLast = types.pop()\n\n    // eslint-disable-next-line no-param-reassign\n    types = types.length ? `${types.join(', ')} or ${typesLast}` : typesLast\n  }\n\n  if (typeof customMessage === 'string' && customMessage.length) {\n    /* eslint-disable no-template-curly-in-string */\n    return customMessage.replace('${types}', types)\n      .replace('${value}', value)\n      .replace('${property}', property)\n    /* eslint-enable no-template-curly-in-string */\n  }\n\n  return `Expected ${types} for \"${value}\" of \"${property}\"`\n}\n\n/**\n * Get configured types for stylelint report message.\n *\n * @param {object} config - The secondary stylelint-plugin config.\n * @param {string} property - The specific CSS declaration's property of the current iteration.\n *\n * @returns {Array} - Returns a list of configured types.\n */\nfunction getTypes(config, property) {\n  const {\n    ignoreVariables,\n    ignoreFunctions,\n    ignoreKeywords,\n    ignoreValues,\n  } = config\n  const types = []\n\n  if (ignoreVariables) {\n    types.push('variable')\n  }\n\n  if (ignoreFunctions) {\n    types.push('function')\n  }\n\n  if (ignoreKeywords && getIgnoredKeywords(ignoreKeywords, property)) {\n    types.push('keyword')\n  }\n\n  if (ignoreValues && getIgnoredValues(ignoreValues, property)) {\n    types.push('keyword')\n  }\n\n  return types\n}\n\n/**\n * Get the correct ignored keywords for a specific CSS declaration's property\n * out of a complex `ignoreKeywords` config hash or array.\n *\n * @param {null|object|Array|string} ignoreKeywords - The keyword/-s to ignore.\n * @param {string} property - The specific CSS declaration's property of the current iteration.\n *\n * @returns {Array} - Returns ignored keywords for a specific CSS property.\n */\nfunction getIgnoredKeywords(ignoreKeywords, property) {\n  if (!ignoreKeywords) return null\n\n  let keywords = ignoreKeywords\n\n  if ({}.hasOwnProperty.call(keywords, property)) {\n    keywords = keywords[property]\n  } else if ({}.hasOwnProperty.call(keywords, '')) {\n    keywords = keywords['']\n  }\n\n  return Array.isArray(keywords) ? keywords : [keywords]\n}\n\n/**\n * Get the correct ignored values for a specific CSS declaration's property\n * out of a complex `ignoreValues` config hash or array.\n *\n * @param {null|string|RegExp|object|Array} ignoreValues - The values/-s to ignore.\n * @param {string} property - The specific CSS declaration's property of the current iteration.\n * @returns {Array} - Returns ignored values for a specific CSS property.\n */\nfunction getIgnoredValues(ignoreValues, property) {\n  if (!ignoreValues) return null\n\n  let values = ignoreValues\n\n  if ({}.hasOwnProperty.call(values, property)) {\n    values = values[property]\n  } else if ({}.hasOwnProperty.call(values, '')) {\n    values = values['']\n  }\n\n  return Array.isArray(values) ? values : [values]\n}\n\n/**\n * Get the auto-fix function either by a function directly or from source file.\n *\n * @param {Function|string} autoFixFunc - A JavaScript function or a module path to resolve it, also from cwd.\n *\n * @returns {Function|null} - Returns the auto-fix function if found, else `null`.\n */\nfunction getAutoFixFunc(autoFixFunc) {\n  const type = typeof autoFixFunc\n\n  if (type === 'function') {\n    return autoFixFunc\n  }\n\n  if (type === 'string') {\n    let resolveAutoFixfunc\n\n    try {\n      resolveAutoFixfunc = require.resolve(autoFixFunc)\n    } catch (error) {\n      resolveAutoFixfunc = require.resolve(path.join(process.cwd(), autoFixFunc))\n    }\n\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    return require(resolveAutoFixfunc)\n  }\n\n  return null\n}\n\nexport {\n  validProperties,\n  validOptions,\n  expected,\n  getTypes,\n  getIgnoredKeywords,\n  getIgnoredValues,\n  getAutoFixFunc,\n}\n","import stylelint from 'stylelint'\nimport shortCSS from 'shortcss'\n\nimport {\n  validProperties, validOptions, expected, getTypes, getIgnoredKeywords, getIgnoredValues, getAutoFixFunc,\n} from './lib/validation'\nimport defaults from './defaults'\n\n/**\n * Rule Name.\n *\n * @constant {string}\n * @default\n */\nconst ruleName = 'scale-unlimited/declaration-strict-value'\nconst { utils } = stylelint\nconst messages = utils.ruleMessages(ruleName, {\n  expected,\n})\n/**\n * RegExp to skip non-CSS properties.\n *\n * @constant  {RegExp}\n * @default\n */\nconst reSkipProp = /^(?:@|\\$|--).+$/\n/**\n * RegExp to parse CSS, SCSS and less variables.\n * - allowing CSS variables to be multi line\n * - Sass namespaces and CSS <ident-token> supported\n *\n * @see https://github.com/sass/sass/blob/master/accepted/module-system.md#member-references\n * @see  https://drafts.csswg.org/css-syntax-3/#ident-token-diagram\n * @constant {RegExp}\n * @default\n */\n// eslint-disable-next-line no-control-regex\nconst reVar = /^-?(?:@.+|(?:(?:[a-zA-Z_-]|[^\\x00-\\x7F])+(?:[a-zA-Z0-9_-]|[^\\x00-\\x7F])*\\.)?\\$.+|var\\(\\s*--[\\s\\S]+\\))$/\n/**\n * RegExp to parse functions.\n * - irgnoring CSS variables `var(--*)`\n * - allow multi line arguments\n *\n * @constant  {RegExp}\n * @default\n */\nconst reFunc = /^(?!var\\(\\s*--)[\\s\\S]+\\([\\s\\S]*\\)$/\n/**\n * RegExp to parse regular expressions.\n * - supporting patterns\n * - and optional flags\n *\n * @constant  {RegExp}\n * @default\n */\nconst reRegex = /^\\/(.*)\\/([a-zA-Z]*)$/\nconst isRegexString = (value) => reRegex.test(value)\nconst getRegexString = (value) => value.match(reRegex).slice(1)\nconst stringToRegex = (value) => new RegExp(...getRegexString(value))\nconst mapIgnoreValue = (ignoreValue) => (isRegexString(ignoreValue) ? stringToRegex(ignoreValue) : new RegExp(`^${ignoreValue}$`))\n\n/**\n * A rule function essentially returns a little PostCSS plugin.\n * It will report violations of this rule.\n *\n * @typedef {Function} PostCSSPlugin\n * @param {object} root - PostCSS root (the parsed AST).\n * @param {object} result - PostCSS lazy result.\n */\n\n/**\n * Stylelint declaration strict value rule function.\n *\n * @see https://stylelint.io/developer-guide/plugins\n * @param {string|string[]} properties - Primary options, a CSS property or list of CSS properties to lint.\n * @param {SecondaryOptions} [options=defaults] - Secondary options, configure edge cases.\n * @param {*} [context] - Only used for autofixing.\n *\n * @returns {PostCSSPlugin} - Returns a PostCSS Plugin.\n */\nconst ruleFunction = (properties, options, context = {}) => (root, result) => {\n  // validate stylelint plugin options\n  const hasValidOptions = utils.validateOptions(\n    result,\n    ruleName,\n    {\n      actual: properties,\n      possible: validProperties,\n    },\n    {\n      actual: options,\n      possible: validOptions,\n      optional: true,\n    },\n  )\n\n  if (!hasValidOptions) return\n\n  // normalize options\n  if (!Array.isArray(properties)) {\n    // eslint-disable-next-line no-param-reassign\n    properties = [properties]\n  }\n\n  const config = {\n    ...defaults,\n    ...options,\n  }\n  const {\n    ignoreVariables, ignoreFunctions, ignoreKeywords, ignoreValues, message, disableFix, autoFixFunc, expandShorthand, recurseLonghand,\n  } = config\n  const autoFixFuncNormalized = getAutoFixFunc(autoFixFunc)\n  const reKeywords = ignoreKeywords ? {} : null\n  const reValues = ignoreValues ? {} : null\n\n  // loop through all properties\n  properties.forEach((property) => {\n    let propFilter = property\n\n    // parse RegExp\n    if (isRegexString(propFilter)) {\n      propFilter = stringToRegex(propFilter)\n    }\n\n    // walk through all declarations filtered by configured properties\n    root.walkDecls(filterDecl)\n\n    /**\n     * Filter declarations for matching properties and expand shorthand properties.\n     *\n     * @callback\n     * @param {object} node - A Declaration-Node from PostCSS AST-Parser.\n     */\n    function filterDecl(node) {\n      const { value, prop } = node\n\n      // skip variable declarations\n      if (reSkipProp.test(prop)) return\n\n      const isShortHand = expandShorthand && shortCSS.isShorthand(prop)\n\n      if (prop === propFilter || (!isShortHand && propFilter instanceof RegExp && propFilter.test(prop))) {\n        lintDeclStrictValue(node)\n      } else if (isShortHand) {\n        const expandedProps = shortCSS.expand(prop, value, recurseLonghand)\n        let failedFlag = false\n\n        Object.keys(expandedProps).forEach((longhandProp) => {\n          const longhandValue = expandedProps[longhandProp]\n\n          if (!failedFlag && (longhandProp === propFilter || (propFilter instanceof RegExp && propFilter.test(longhandProp)))) {\n            failedFlag = lintDeclStrictValue(node, longhandProp, longhandValue)\n          }\n        })\n      }\n    }\n\n    /**\n     * Lint usages of declarations values againts, variables, functions\n     * or custum keywords - as configured.\n     *\n     * @callback\n     * @param {object} node - A Declaration-Node from PostCSS AST-Parser.\n     * @param {string} [longhandProp] - A Declaration-Node from PostCSS AST-Parser.\n     * @param {string} [longhandValue] - A Declaration-Node from PostCSS AST-Parser.\n     */\n    function lintDeclStrictValue(node, longhandProp, longhandValue) {\n      const { value: nodeValue, prop: nodeProp } = node\n      const value = longhandValue || nodeValue\n\n      // falsify everything by default\n      let validVar = false\n      let validFunc = false\n      let validKeyword = false\n      let validValue = false\n\n      // test variable\n      if (ignoreVariables) {\n        validVar = reVar.test(value)\n      }\n\n      // test function\n      if (ignoreFunctions && !validVar) {\n        validFunc = reFunc.test(value)\n      }\n\n      // test keywords\n      if (ignoreKeywords && (!validVar || !validFunc)) {\n        let reKeyword = reKeywords[property]\n\n        if (!reKeyword) {\n          const ignoreKeyword = getIgnoredKeywords(ignoreKeywords, property)\n\n          if (ignoreKeyword) {\n            reKeyword = new RegExp(`^${ignoreKeyword.join('$|^')}$`)\n            reKeywords[property] = reKeyword\n          }\n        }\n\n        if (reKeyword) {\n          validKeyword = reKeyword.test(value)\n        }\n      }\n\n      if (ignoreValues && (!validVar || !validFunc || !validKeyword)) {\n        let reValueList = reValues[property]\n\n        if (!reValueList) {\n          const ignoreValue = getIgnoredValues(ignoreValues, property)\n\n          if (ignoreValue) {\n            reValueList = ignoreValue.map(mapIgnoreValue)\n            reValues[property] = reValueList\n          }\n        }\n\n        if (reValueList) {\n          validValue = reValueList.filter((reValue) => reValue.test(value)).length > 0\n        }\n      }\n\n      // report only if all failed\n      if (!validVar && !validFunc && !validKeyword && !validValue) {\n        const types = getTypes(config, property)\n\n        // support auto fixing\n        if (context.fix && !disableFix) {\n          const fixedValue = autoFixFuncNormalized(node, {\n            validVar,\n            validFunc,\n            validKeyword,\n            validValue,\n            longhandProp,\n            longhandValue,\n          }, root, config)\n\n          // apply fixed value if returned\n          if (fixedValue) {\n            // eslint-disable-next-line no-param-reassign\n            node.value = fixedValue\n          }\n        } else {\n          const { raws } = node\n          const { start } = node.source\n\n          utils.report({\n            ruleName,\n            result,\n            node,\n            line: start.line,\n            column: start.column + nodeProp.length + raws.between.length,\n            message: messages.expected(types, value, nodeProp, message),\n          })\n        }\n\n        return true\n      }\n\n      return false\n    }\n  })\n}\n\nruleFunction.primaryOptionArray = true\n\nconst declarationStrictValuePlugin = stylelint.createPlugin(ruleName, ruleFunction)\n\nexport default declarationStrictValuePlugin\nexport { ruleName, messages }\n"],"names":["const","defaults","ignoreVariables","ignoreFunctions","ignoreKeywords","ignoreValues","expandShorthand","recurseLonghand","severity","message","disableFix","autoFixFunc","isNumberOrString","value","type","validProperties","actual","Array","isArray","every","item","validOptions","allowedKeys","Object","keys","key","indexOf","validHash","getIgnoredKeywords","property","keywords","hasOwnProperty","call","getIgnoredValues","values","ruleName","messages","utils","ruleMessages","types","customMessage","typesLast","pop","length","join","replace","reSkipProp","reVar","reFunc","reRegex","isRegexString","test","stringToRegex","RegExp","match","slice","getRegexString","mapIgnoreValue","ignoreValue","ruleFunction","properties","options","context","root","result","validateOptions","possible","optional","config","autoFixFuncNormalized","resolveAutoFixfunc","require","resolve","error","path","process","cwd","getAutoFixFunc","reKeywords","reValues","forEach","propFilter","lintDeclStrictValue","node","longhandProp","longhandValue","nodeValue","validVar","validFunc","validKeyword","validValue","reKeyword","ignoreKeyword","reValueList","map","filter","reValue","push","getTypes","fix","fixedValue","raws","source","report","line","start","column","nodeProp","between","expected","walkDecls","prop","isShortHand","shortCSS","isShorthand","expandedProps","expand","failedFlag","primaryOptionArray","stylelint","createPlugin"],"mappings":"qEAgCAA,IAAMC,EAAW,CACfC,iBAAiB,EACjBC,iBAAiB,EACjBC,eAAgB,KAChBC,aAAc,KACdC,iBAAiB,EACjBC,iBAAiB,EACjBC,SAAU,QACVC,QAAS,KACTC,YAAY,EACZC,YAAa,MC/Bf,SAASC,EAAiBC,OAClBC,SAAcD,QAEJ,WAATC,GAA8B,WAATA,EAU9B,SAASC,EAAgBC,UAChBJ,EAAiBI,IAClBC,MAAMC,QAAQF,IAAWA,EAAOG,eAAOC,UAASR,EAAiBQ,KAUzE,SAASC,EAAaL,MACE,iBAAXA,EAAqB,OAAO,MAEjCM,EAAcC,OAAOC,KAAKvB,YAC3BsB,OAAOC,KAAKR,GAAQG,eAAOM,UAAQH,EAAYI,QAAQD,IAAQ,KAEhE,oBAAqBT,GACc,kBAA3BA,EAAOd,iBACa,OAA3Bc,EAAOd,iBAER,oBAAqBc,GACc,kBAA3BA,EAAOb,iBACa,OAA3Ba,EAAOb,iBAER,aAAca,GACc,iBAApBA,EAAOR,UACM,OAApBQ,EAAOR,UAER,mBAAoBQ,IAClBD,EAAgBC,EAAOZ,kBACvBuB,EAAUX,EAAOZ,iBAEnB,iBAAkBY,IAChBD,EAAgBC,EAAOX,gBACvBsB,EAAUX,EAAOX,eAEnB,oBAAqBW,GACc,kBAA3BA,EAAOV,iBACa,OAA3BU,EAAOV,iBAER,oBAAqBU,GACc,kBAA3BA,EAAOT,iBACa,OAA3BS,EAAOT,iBAER,YAAaS,GACc,iBAAnBA,EAAOP,SACK,OAAnBO,EAAOP,SAER,eAAgBO,GACc,kBAAtBA,EAAON,YACQ,OAAtBM,EAAON,YAER,gBAAiBM,GACc,mBAAvBA,EAAOL,aACgB,iBAAvBK,EAAOL,aACS,OAAvBK,EAAOL,aAYd,SAASgB,EAAUX,SACK,iBAAXA,GAEJO,OAAOC,KAAKR,GAAQG,eAAOM,UAAQV,EAAgBC,EAAOS,MA6EnE,SAASG,EAAmBxB,EAAgByB,OACrCzB,EAAgB,OAAO,SAExB0B,EAAW1B,QAEX,GAAG2B,eAAeC,KAAKF,EAAUD,GACnCC,EAAWA,EAASD,GACX,GAAGE,eAAeC,KAAKF,EAAU,MAC1CA,EAAWA,EAAS,KAGfb,MAAMC,QAAQY,GAAYA,EAAW,CAACA,GAW/C,SAASG,EAAiB5B,EAAcwB,OACjCxB,EAAc,OAAO,SAEtB6B,EAAS7B,QAET,GAAG0B,eAAeC,KAAKE,EAAQL,GACjCK,EAASA,EAAOL,GACP,GAAGE,eAAeC,KAAKE,EAAQ,MACxCA,EAASA,EAAO,KAGXjB,MAAMC,QAAQgB,GAAUA,EAAS,CAACA,OChMrCC,EAAW,qDAEXC,EAAWC,EAAMC,aAAaH,EAAU,UD6F9C,SAAkBI,EAAO1B,EAAOgB,EAAUW,MACpCvB,MAAMC,QAAQqB,GAAQ,KAClBE,EAAYF,EAAMG,MAGxBH,EAAQA,EAAMI,OAAYJ,EAAMK,KAAK,aAAYH,EAAcA,QAGpC,iBAAlBD,GAA8BA,EAAcG,OAE9CH,EAAcK,QAAQ,WAAYN,GACtCM,QAAQ,WAAYhC,GACpBgC,QAAQ,cAAehB,eAITU,WAAc1B,WAAcgB,SCpG3CiB,EAAa,kBAYbC,EAAQ,yGASRC,EAAS,qCASTC,EAAU,wBACVC,WAAiBrC,UAAUoC,EAAQE,KAAKtC,IAExCuC,WAAiBvC,UAAU,kCAAIwC,8BADbxC,UAAUA,EAAMyC,MAAML,GAASM,MAAM,GACdC,CAAe3C,OACxD4C,WAAkBC,UAAiBR,EAAcQ,GAAeN,EAAcM,GAAe,IAAIL,WAAWK,QAqB5GC,WAAgBC,EAAYC,EAASC,yBAAU,aAAQC,EAAMC,MAEzC3B,EAAM4B,gBAC5BD,EACA7B,EACA,CACEnB,OAAQ4C,EACRM,SAAUnD,GAEZ,CACEC,OAAQ6C,EACRK,SAAU7C,EACV8C,UAAU,KAOTlD,MAAMC,QAAQ0C,KAEjBA,EAAa,CAACA,QAGVQ,EAAS7C,iBACVtB,EACA4D,kJAKCQ,EDyGR,SAAwB1D,OAChBG,SAAcH,KAEP,aAATG,SACKH,KAGI,WAATG,EAAmB,KACjBwD,MAGFA,EAAqBC,QAAQC,QAAQ7D,GACrC,MAAO8D,GACPH,EAAqBC,QAAQC,QAAQE,EAAK9B,KAAK+B,QAAQC,MAAOjE,WAIzD4D,QAAQD,UAGV,KC7HuBO,gBACxBC,EAAa1E,EAAiB,GAAK,KACnC2E,EAAW1E,EAAe,GAAK,KAGrCuD,EAAWoB,iBAASnD,OACdoD,EAAapD,WAiDRqD,EAAoBC,EAAMC,EAAcC,GAChCC,aACTzE,EAAQwE,WAGVE,GAAW,EACXC,GAAY,EACZC,GAAe,EACfC,GAAa,KAGbxF,IACFqF,EAAWxC,EAAMI,KAAKtC,IAIpBV,IAAoBoF,IACtBC,EAAYxC,EAAOG,KAAKtC,IAItBT,KAAoBmF,IAAaC,GAAY,KAC3CG,EAAYb,EAAWjD,OAEtB8D,EAAW,KACRC,EAAgBhE,EAAmBxB,EAAgByB,GAErD+D,IACFD,EAAY,IAAItC,WAAWuC,EAAchD,KAAK,YAC9CkC,EAAWjD,GAAY8D,GAIvBA,IACFF,EAAeE,EAAUxC,KAAKtC,OAI9BR,KAAkBkF,IAAaC,IAAcC,GAAe,KAC1DI,EAAcd,EAASlD,OAEtBgE,EAAa,KACVnC,EAAczB,EAAiB5B,EAAcwB,GAE/C6B,IACFmC,EAAcnC,EAAYoC,IAAIrC,GAC9BsB,EAASlD,GAAYgE,GAIrBA,IACFH,EAAaG,EAAYE,gBAAQC,UAAYA,EAAQ7C,KAAKtC,KAAQ8B,OAAS,QAK1E4C,GAAaC,GAAcC,GAAiBC,GAAY,KACrDnD,EDvFd,SAAkB6B,EAAQvC,GAEtB3B,4DAKIqC,EAAQ,6BAGZA,EAAM0D,KAAK,YAGT9F,GACFoC,EAAM0D,KAAK,YAGT7F,GAAkBwB,EAAmBxB,EAAgByB,IACvDU,EAAM0D,KAAK,WAGT5F,GAAgB4B,EAAiB5B,EAAcwB,IACjDU,EAAM0D,KAAK,WAGN1D,EC8Da2D,CAAS9B,EAAQvC,MAG3BiC,EAAQqC,MAAQzF,EAAY,KACxB0F,EAAa/B,EAAsBc,EAAM,UAC7CI,YACAC,eACAC,aACAC,eACAN,gBACAC,GACCtB,EAAMK,GAGLgC,IAEFjB,EAAKtE,MAAQuF,OAEV,CACGC,MACUlB,EAAKmB,aAEvBjE,EAAMkE,OAAO,UACXpE,SACA6B,OACAmB,EACAqB,KAAMC,EAAMD,KACZE,OAAQD,EAAMC,OAASC,EAAShE,cAAciE,QAAQjE,OACtDlC,QAAS2B,EAASyE,SAAStE,EAAO1B,EAAO8F,EAAUlG,YAIhD,SAGF,EA1ILyC,EAAc+B,KAChBA,EAAa7B,EAAc6B,IAI7BlB,EAAK+C,mBAQe3B,GACVtE,2BAGJiC,EAAWK,KAAK4D,QAEdC,EAAc1G,GAAmB2G,EAASC,YAAYH,MAExDA,IAAS9B,IAAgB+B,GAAe/B,aAAsB5B,QAAU4B,EAAW9B,KAAK4D,GAC1F7B,EAAoBC,QACf,GAAI6B,EAAa,KAChBG,EAAgBF,EAASG,OAAOL,EAAMlG,EAAON,GAC/C8G,GAAa,EAEjB9F,OAAOC,KAAK2F,GAAenC,iBAASI,OAC5BC,EAAgB8B,EAAc/B,IAE/BiC,IAAejC,IAAiBH,GAAeA,aAAsB5B,QAAU4B,EAAW9B,KAAKiC,MAClGiC,EAAanC,EAAoBC,EAAMC,EAAcC,eAgHjE1B,EAAa2D,oBAAqB,iBAEGC,EAAUC,aAAarF,EAAUwB"}